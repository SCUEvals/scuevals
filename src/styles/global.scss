@import 'theme';

html {
  position: relative;
  height: 100%;
}

body {
  background: white;
  text-align: center;
  height: 100%;
  min-height: 100vh;
  color: $overlayBackground;
  text-overflow: ellipsis;
  font-family: 'Roboto', sans-serif;
}

body::after {
  content: '';
  background-image: url('/images/background.jpg');
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  opacity: 0.6;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  position: fixed;
  height: 100vh;
  z-index: -1;
}

::selection {
  background: $focusColor;
}

button {
  cursor: pointer;
}

input[type='checkbox'],
label {
  cursor: pointer;
}

label > input[type='checkbox'] {
  margin-left: 5px;
  vertical-align: middle;
}

.btn {
  color: white;
  background: $SCUred;
  cursor: pointer;
  border-radius: $defaultBorderRadius;

  &:hover {
    color: white;
    background: $SCUdarkred;
  }

  &:focus {
    color: white;
  }
}

a {
  transition: all 0.2s ease-in-out;
  font-weight: bold;
  text-decoration: none !important;
  color: $SCUred;
  word-wrap: break-word;

  &:focus {
    color: $SCUred;
  }

  &:hover {
    color: $SCUdarkred;
  }
}

h6 {
  font-size: 1.1rem;
}

form {
  i {
    font-size: 25px;
    color: $SCUred;
    cursor: pointer;

    &:hover {
      color: $SCUdarkred;
    }
  }

  h6 {
    margin-top: 50px;
    margin-bottom: 20px;
  }
}

form.content {
  .form-control {
    border: 1px solid $backgroundColor;
  }
}

label {
  font-size: 1.1rem; //h6 size

  input[type='radio'] {
    margin-right: 5px;
  }
}

label:not(:first-child) input[type='radio'] {
  margin-left: 15px;
}

.content {
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: $defaultBorderRadius;
  background: white;
  padding: 15px;
  margin: 15px 0;
  width: 100%;
  position: relative;
}

.flex {
  display: flex;
  justify-content: center;
  align-items: center;

  h3 {
    position: relative; //for home icon to sit inside h3 when signed out
  }

  div.container { //not footer's container, only div
    justify-content: center;
    align-items: center;
    display: flex;
    padding: 15px; //adds top and bottom padding
  }
}

.react-bootstrap-table {
  overflow: auto;

  table {
    margin-bottom: 0;

    @media (max-width: $xs) {
      table-layout: initial;
    }

    td {
      padding: 0;
      vertical-align: middle;

      a {
        display: block;
      }
    }

    td a,
    th {
      padding: 10px;
    }
  }
}

.loadingWrapper {
  @include fixedCenter;

  color: $SCUred;
  height: auto !important;
}

.Select-control {
  border-radius: $defaultBorderRadius;
  border: 2px solid $backgroundColor;

  &:focus {
    border-color: $focusColor;
  }
}

.Select {
  margin: auto auto 50px;
  max-width: 350px;
  text-align: left;

  &-option {
    border-bottom: 1px solid $backgroundColor;
    color: $overlayBackground;
    font-weight: bold;

    &.is-focused {
      background: $focusColorTransparent;
      color: $SCUdarkred;
    }

    &.is-selected {
      color: $SCUred;
      background: none;

      &.is-focused {
        background: $focusColorTransparent;
      }
    }
  }

  &-value {
    max-width: 302px !important;
    text-overflow: ellipsis;
    overflow: hidden;
    margin: 0 10px;
    text-align: center;
  }

  &-value-icon {
    width: 19px;
    float: left;
  }

  &-arrow-zone,
  &-clear-zone {
    vertical-align: top;
  }

  &-clear-zone {
    position: absolute;
    right: 25px;
    top: 3px;
  }

  &-menu-outer {
    max-height: none;

    &:hover {
      color: $SCUdarkred;
    }

    .Select-menu {
      max-height: 205px;
    }
  }

  &.select-error .Select-control {
    border-color: $SCUred !important;
  }
}

.sort-wrapper {
  max-width: 300px;
  margin: 0 auto 15px auto;

  .Select {
    margin-bottom: 0;
    display: inline-block;
    width: calc(100% - 31px);

    + i {
      width: 16px;
      font-size: 24px;
      margin-left: 15px;
      margin-top: 5px;
      vertical-align: top;
      display: inline-block;
    }
  }
}

.Select.is-disabled > .Select-control {
  .Select-input {
    width: calc(100% + 25px) !important;
    background: #f9f9f9;

    &:focus {
      border: 2px solid $focusColor !important;
    }
  }
}

.Select.is-focused:not(.is-open) > .Select-control {
  box-shadow: none;
  border: 2px solid $focusColor;
}

.Select--multi.has-value:not(.is-focused):not(.is-open) > .Select-control .Select-input {
  width: 0 !important;
  margin-left: 0 !important;
  height: 0;
}

.Select--multi {
  .Select-value-icon {
    display: flex;
    align-items: center;
  }

  .Select-multi-value-wrapper {
    padding-right: 20px;
    display: flex;
    flex-wrap: wrap;

    div:nth-last-of-type(2):not(.Select-placeholder) {
      margin-bottom: 4px;
    }

    .Select-value {
      margin: 4px 0 0 4px;
      height: 100%;
      display: flex;
      color: white;
      background: $SCUred;

      .Select-value-icon:hover {
        background: $SCUdarkred;
        color: white;
      }
    }
  }
}

#app {
  height: 100%;
}

.Select--single > .Select-control .Select-value,
.Select-placeholder {
  top: initial;
}

.Select.has-value.is-clearable.Select--single > .Select-control .Select-value {
  padding: 0;
  margin: 0 45px;
}

.input-group-btn:not(:last-child) > .btn {
  border-radius: 0 $defaultBorderRadius $defaultBorderRadius 0;
}

@media (max-width: $xs) {
  .col-sm-6:not(:last-child) {
    padding-bottom: 15px;
  }
}

@media (max-width: $md - 1) {
  .col-md-6:not(:last-child) {
    padding-bottom: 15px;
  }
}

textarea {
  width: 100%;
  max-width: 750px;
  resize: none;
  border: 2px solid $overlayBackground !important; //below outline is set to none, but exception for textarea
  border-radius: $defaultBorderRadius;
  padding: 5px;

  &:focus {
    border: 2px solid $focusColor !important;
  }
}

a.homeBtn {
  font-size: 1.75rem;

  &.noAuthHomeBtn {
    position: absolute;
    left: 0;
    top: -2px;
  }

  &:focus {
    text-shadow: $textShadow;
    border: 2px solid transparent !important;
  }
}

.reactModal {
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;
  width: 100%;
  padding: 15px 30px;

  .modalWrapper {
    border-radius: $defaultBorderRadius;
    border: 2px solid $backgroundColor;
    overflow: auto;
  }

  button {
    margin: 15px 15px 0 15px;
  }

  h5 {
    margin-bottom: 0;
    padding: 5px;
  }

  .modalHeader {
    background: $backgroundColor;
    position: relative;

    a.homeBtn {
      float: left;
      margin-top: -6px;
    }

    i.fa-times {
      position: absolute;
      top: 1px;
      right: 3px;
      font-size: 20px;
    }
  }

  .modalBlock {
    background: white;
    padding: 15px;
  }
}

//target all focusable items to make focus color same for all items
a[href],
area[href],
input:not([disabled]):not([role='combobox']), //not combobox, don't want to see border of characters while typing input (on react-select)
select:not([disabled]),
textarea:not([disabled]),
button:not([disabled]),
iframe,
[tabindex],
[contentEditable=true] {
  &:not([tabindex='-1']) {
    border: 2px solid transparent; //not important, sometimes overridden
    transition: none;

    &:focus {
      border: 2px solid $focusColor;
      box-shadow: none;
      outline: none;
    }
  }
}

input[type=radio]:focus {
  outline: 2px solid $focusColor !important;
  border: none !important;
}

.fa {
  color: $SCUred;
}

a .fa {
  color: inherit;
}

button .fa {
  color: white;
}

.fa[tabindex] {
  cursor: pointer;

  &:focus {
    border: 2px solid transparent;
    text-shadow: $textShadow;
  }

  &:hover {
    color: $SCUdarkred;
  }
}

.banner {
  background: $SCUred;
  color: white;
  padding: 7px;
  margin-bottom: 20px;
}

small {
  display: block;
  line-height: 18px;
  white-space: pre-wrap;
}

hr {
  margin: 15px 0;
}

img {
  font-size: 10px; //alt text font size
  white-space: pre-wrap;
  display: flex; //center alt text
  align-items: center;
  justify-content: center;
}

.popper {
  position: absolute;
  background: $SCUred;
  color: white;
  border-radius: $defaultBorderRadius;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
  padding: 10px;
  text-align: center;
  white-space: pre-wrap;
  z-index: 1;
}

.popper .popper__arrow {
  width: 0;
  height: 0;
  position: absolute;
  margin: 5px;
  border: solid $SCUred;
}

.popper[data-placement='top'] {
  margin-bottom: 5px;
}

.popper[data-placement='top'] .popper__arrow {
  border-width: 5px 5px 0 5px;
  border-left-color: transparent;
  border-right-color: transparent;
  border-bottom-color: transparent;
  bottom: -5px;
  left: calc(50% - 5px);
  margin-top: 0;
  margin-bottom: 0;
}

.popper[data-placement='bottom'] {
  margin-top: 5px;
}

.popper[data-placement='bottom'] .popper__arrow {
  border-width: 0 5px 5px 5px;
  border-left-color: transparent;
  border-right-color: transparent;
  border-top-color: transparent;
  top: -5px;
  left: calc(50% - 5px);
  margin-top: 0;
  margin-bottom: 0;
}

.popper[data-placement='right'] {
  margin-left: 5px;
}

.popper[data-placement='right'] .popper__arrow {
  border-width: 5px 5px 5px 0;
  border-left-color: transparent;
  border-top-color: transparent;
  border-bottom-color: transparent;
  left: -5px;
  top: calc(50% - 5px);
  margin-left: 0;
  margin-right: 0;
}

.popper[data-placement='left'] {
  margin-right: 5px;
}

.popper[data-placement='left'] .popper__arrow {
  border-width: 5px 0 5px 5px;
  border-top-color: transparent;
  border-right-color: transparent;
  border-bottom-color: transparent;
  right: -5px;
  top: calc(50% - 5px);
  margin-left: 0;
  margin-right: 0;
}

@mixin popperTarget {
  width: 22px;
  height: 22px;
  border-radius: 50%;
  background-color: $SCUred;
  border: 2px solid white !important;
  cursor: pointer;

  &:hover {
    background-color: $SCUdarkred;
  }

  &:focus {
    border: 2px solid $focusColor !important;
  }

  i {
    font-size: 14px;
    color: white;
    display: flex;
    width: 100%;
    height: 100%;
    justify-content: center;
    align-items: center;

    &:hover {
      color: white;
    }
  }
}

.popper-manager {
  display: inline-block;
}

.popper-target + .popper {
  visibility: hidden;
}

.popper-target:hover + .popper,
.popper-target:focus + .popper {
  visibility: visible;
}

.popper-target {
  @include popperTarget;
}

.tooltip-popper {
  font-size: 14px;
  z-index: 2;
}

.score1 {
  fill: $score1Color;
}

.score2 {
  fill: $score2Color;
}

.score3 {
  fill: $score3Color;
}

.score4 {
  fill: $score4Color;
}

svg.score {
  width: 36px; //2x cx
  height: 36px; //2x cy

  circle { //r = 16, circumference = 2 * pi * 16 ≈ 100.531
    transform: rotate(-90deg) scaleY(-1);
    transform-origin: center;
    animation: score 1s;
    stroke-dasharray: 100.531;
    stroke: black;
    stroke-width: 3;

    &.score1 {
      stroke-dashoffset: 75.398; // == * -3/4 circumference
    }

    &.score2 {
      stroke-dashoffset: 50.266; // == * -1/2 circumference
    }

    &.score3 {
      stroke-dashoffset: 25.133; // == * -1/4 circumference
    }

    &.score4 {
      stroke-dashoffset: 0;
    }
  }

  text {
    dominant-baseline: central;
    text-anchor: middle;
    fill: white;
    font-size: 16px;
  }
}

@keyframes score {
  from {
    stroke-dashoffset: 100.531;
  }
}

.signOutBtn {
  margin-top: 15px;
  font-weight: bold;
  padding: 0;
  color: $SCUred;
  background: initial;
  border: none;

  &:hover {
    color: $SCUdarkred;
  }
}

.noWriteDiv {
  display: block;
  text-align: left;
}

.noWriteDivBanner {
  position: absolute;
  left: 30px;

  .homeBtn {
    color: white;

    i:hover {
      color: $hoverOverlayLinkColor;
    }
  }
}

.widget {
  max-width: 750px;
  margin: 0 auto;
  overflow: auto;
}

.widgetWrapper {
  overflow: auto;

  .widget {
    min-width: 478px;
  }
}

.error {
  border: 2px solid $SCUred;
  border-radius: $defaultBorderRadius;
}

.no-error {
  border: 2px solid transparent;
  border-radius: $defaultBorderRadius;
}

.comment-error {
  border: 2px solid $SCUred !important;
}

.caret {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 2px;
  vertical-align: middle;
  border-top: 4px dashed;
  border-top: 4px solid \9;
  border-right: 4px solid transparent;
  border-left: 4px solid transparent;
}

.dropup .caret,
.navbar-fixed-bottom .dropdown .caret {
  border-top: 0;
  border-bottom: 4px dashed;
  border-bottom: 4px solid \9;
  content: '';
}

.ReactModal__Overlay.ReactModal__Overlay--after-open {
  z-index: 9999;
}

.checkbox-group {
  display: inline-block;
  text-align: left;
}

button[aria-expanded=true] .fa-chevron-down {
  display: none;
}

button[aria-expanded=false] .fa-chevron-up {
  display: none;
}
